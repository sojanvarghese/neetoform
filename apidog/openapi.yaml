openapi: 3.1.0
info:
  title: NeetoForm APIs
  description: ''
  version: 1.0.0
tags:
  - name: Forms
  - name: pet
  - name: store
  - name: user
  - name: Submissions
paths:
  /api/external/v1:
    get:
      summary: List all forms
      deprecated: false
      description: >-
        This API allows to list all the forms in a workspace. Replace `spinkart`
        with your workspace's subdomain. 
      tags:
        - Forms
        - Forms
      parameters:
        - name: page_number
          in: query
          description: >-
            Retrieve paginated forms by specifying the desired page number. If
            this parameter is absent, all forms will be returned.
          required: false
          schema:
            type: Number
        - name: page_size
          in: query
          description: >-
            Set the number of results returned in the response. Defaulting to 30
            when omitted.
          required: false
          schema:
            type: Number
      responses:
        '200':
          description: OK - Request succeeded
          content:
            application/json:
              schema:
                type: object
                properties:
                  forms:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        title:
                          type: string
                        is_published:
                          type: boolean
                        state:
                          type: string
                        created_at:
                          type: string
                          format: date-time
                        updated_at:
                          type: string
                          format: date-time
                        submissions_count:
                          type: integer
                        attempt_url:
                          type: string
                        is_archived:
                          type: boolean
                        is_disabled:
                          type: boolean
                        is_suspended:
                          type: boolean
                        created_by:
                          type: string
                  total_count:
                    type: integer
          headers: {}
        '400':
          description: Bad Request - Missing/Invalid parameters
          headers: {}
        '401':
          description: Unauthorized - Invalid API key
          headers: {}
        '501':
          description: Internal server error
          headers: {}
      security: []
  /api/external/v1/forms:
    get:
      summary: List all fooorms
      deprecated: false
      description: >-
        This API retrieves a list of all forms within a workspace. Replace
        `spinkart` with your workspaceâ€™s subdomain.

        Refer to **Identifying your subdomain** for more information.
      tags:
        - Forms
      parameters:
        - name: page_number
          in: query
          description: >-
            Retrieve paginated forms by specifying the desired page number. If
            this parameter is absent, all forms will be returned.
          required: false
          schema:
            type: Number
        - name: page_size
          in: query
          description: >-
            Set the number of results returned in the response. Defaulting to 30
            when omitted.
          required: false
          schema:
            type: Number
        - name: X-Api-Key
          in: header
          description: >-
            X-Api-Key is used to authenticate requests using an API key. Provide
            your API key in this header to access protected endpoints. Refer to
            Authentication for more information.
          required: true
          example: '{{your-api-key}}'
          schema:
            type: string
      responses:
        '200':
          description: OK - Request succeeded
          content:
            application/json:
              schema:
                type: object
                properties:
                  forms:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        title:
                          type: string
                        is_published:
                          type: boolean
                        state:
                          type: string
                        created_at:
                          type: string
                          format: date-time
                        updated_at:
                          type: string
                          format: date-time
                        submissions_count:
                          type: integer
                        attempt_url:
                          type: string
                        is_archived:
                          type: boolean
                        is_disabled:
                          type: boolean
                        is_suspended:
                          type: boolean
                        created_by:
                          type: string
                      required:
                        - created_at
                  total_count:
                    type: integer
          headers: {}
      security: []
  /pet/{petId}/uploadImage:
    post:
      summary: uploads an image
      deprecated: false
      description: ''
      operationId: uploadFile
      tags:
        - pet
      parameters:
        - name: petId
          in: path
          description: ID of pet to update
          required: true
          example: 0
          schema:
            type: integer
            format: int64
            default: 1
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                additionalMetadata:
                  description: Additional data to pass to server
                  type: string
                  example: ''
                file:
                  description: file to upload
                  type: string
                  format: binary
                  example: ''
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          headers: {}
      security: []
  /pet:
    post:
      summary: Add a new pet to the store
      deprecated: false
      description: ''
      operationId: addPet
      tags:
        - pet
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
      responses:
        '405':
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties: {}
          headers: {}
      security: []
    put:
      summary: Update an existing pet
      deprecated: false
      description: ''
      operationId: updatePet
      tags:
        - pet
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
      responses:
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                type: object
                properties: {}
          headers: {}
        '404':
          description: Pet not found
          content:
            application/json:
              schema:
                type: object
                properties: {}
          headers: {}
        '405':
          description: Validation exception
          content:
            application/json:
              schema:
                type: object
                properties: {}
          headers: {}
      security: []
  /pet/findByStatus:
    get:
      summary: Finds Pets by status
      deprecated: false
      description: Multiple status values can be provided with comma separated strings
      operationId: findPetsByStatus
      tags:
        - pet
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: true
          schema:
            type: array
            items:
              type: string
              enum:
                - available
                - pending
                - sold
              default: available
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
          headers: {}
        '400':
          description: Invalid status value
          content:
            application/json:
              schema:
                type: object
                properties: {}
          headers: {}
      security: []
  /pet/findByTags:
    get:
      summary: Finds Pets by tags
      deprecated: true
      description: >-
        Multiple tags can be provided with comma separated strings. Use tag1,
        tag2, tag3 for testing.
      operationId: findPetsByTags
      tags:
        - pet
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
          headers: {}
        '400':
          description: Invalid tag value
          content:
            application/json:
              schema:
                type: object
                properties: {}
          headers: {}
      security: []
  /pet/{petId}:
    get:
      summary: Find pet by ID
      deprecated: false
      description: Returns a single pet
      operationId: getPetById
      tags:
        - pet
      parameters:
        - name: petId
          in: path
          description: ID of pet to return
          required: true
          example: 0
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
          headers: {}
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                type: object
                properties: {}
          headers: {}
        '404':
          description: Pet not found
          content:
            application/json:
              schema:
                type: object
                properties: {}
          headers: {}
      security: []
    post:
      summary: Updates a pet in the store with form data
      deprecated: false
      description: ''
      operationId: updatePetWithForm
      tags:
        - pet
      parameters:
        - name: petId
          in: path
          description: ID of pet that needs to be updated
          required: true
          example: 0
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  description: Updated name of the pet
                  type: string
                  example: ''
                status:
                  description: Updated status of the pet
                  type: string
                  example: ''
      responses:
        '405':
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties: {}
          headers: {}
      security: []
    delete:
      summary: Deletes a pet
      deprecated: false
      description: ''
      operationId: deletePet
      tags:
        - pet
      parameters:
        - name: petId
          in: path
          description: Pet id to delete
          required: true
          example: 0
          schema:
            type: integer
            format: int64
        - name: api_key
          in: header
          description: ''
          required: false
          example: ''
          schema:
            type: string
      responses:
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                type: object
                properties: {}
          headers: {}
        '404':
          description: Pet not found
          content:
            application/json:
              schema:
                type: object
                properties: {}
          headers: {}
      security: []
  /store/order:
    post:
      summary: Place an order for a pet
      deprecated: false
      description: ''
      operationId: placeOrder
      tags:
        - store
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          headers: {}
        '400':
          description: Invalid Order
          content:
            application/json:
              schema:
                type: object
                properties: {}
          headers: {}
      security: []
  /store/order/{orderId}:
    get:
      summary: Find purchase order by ID
      deprecated: false
      description: >-
        For valid response try integer IDs with value >= 1 and <= 10. Other
        values will generated exceptions
      operationId: getOrderById
      tags:
        - store
      parameters:
        - name: orderId
          in: path
          description: ID of pet that needs to be fetched
          required: true
          example: 0
          schema:
            type: integer
            format: int64
            minimum: 1
            maximum: 10
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          headers: {}
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                type: object
                properties: {}
          headers: {}
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                type: object
                properties: {}
          headers: {}
      security: []
    delete:
      summary: Delete purchase order by ID
      deprecated: false
      description: >-
        For valid response try integer IDs with positive integer value. Negative
        or non-integer values will generate API errors
      operationId: deleteOrder
      tags:
        - store
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          example: 0
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                type: object
                properties: {}
          headers: {}
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                type: object
                properties: {}
          headers: {}
      security: []
  /store/inventory:
    get:
      summary: Returns pet inventories by status
      deprecated: false
      description: Returns a map of status codes to quantities
      operationId: getInventory
      tags:
        - store
      parameters: []
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
                properties: {}
          headers: {}
      security: []
  /user/createWithArray:
    post:
      summary: Creates list of users with given input array
      deprecated: false
      description: ''
      operationId: createUsersWithArrayInput
      tags:
        - user
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserArray'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties: {}
          headers: {}
      security: []
  /user/createWithList:
    post:
      summary: Creates list of users with given input array
      deprecated: false
      description: ''
      operationId: createUsersWithListInput
      tags:
        - user
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserArray'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties: {}
          headers: {}
      security: []
  /user/{username}:
    get:
      summary: Get user by user name
      deprecated: false
      description: ''
      operationId: getUserByName
      tags:
        - user
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          example: ''
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          headers: {}
        '400':
          description: Invalid username supplied
          content:
            application/json:
              schema:
                type: object
                properties: {}
          headers: {}
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties: {}
          headers: {}
      security: []
    put:
      summary: Updated user
      deprecated: false
      description: This can only be done by the logged in user.
      operationId: updateUser
      tags:
        - user
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          example: ''
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '400':
          description: Invalid user supplied
          content:
            application/json:
              schema:
                type: object
                properties: {}
          headers: {}
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties: {}
          headers: {}
      security: []
    delete:
      summary: Delete user
      deprecated: false
      description: This can only be done by the logged in user.
      operationId: deleteUser
      tags:
        - user
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          example: ''
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
          content:
            application/json:
              schema:
                type: object
                properties: {}
          headers: {}
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties: {}
          headers: {}
      security: []
  /user/login:
    get:
      summary: Logs user into the system
      deprecated: false
      description: ''
      operationId: loginUser
      tags:
        - user
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: string
          headers:
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
        '400':
          description: Invalid username/password supplied
          content:
            application/json:
              schema:
                type: object
                properties: {}
          headers: {}
      security: []
  /user/logout:
    get:
      summary: Logs out current logged in user session
      deprecated: false
      description: ''
      operationId: logoutUser
      tags:
        - user
      parameters: []
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties: {}
          headers: {}
      security: []
  /user:
    post:
      summary: Create user
      deprecated: false
      description: This can only be done by the logged in user.
      operationId: createUser
      tags:
        - user
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties: {}
          headers: {}
      security: []
  /api/external/v1/forms/{form_id}/submissions:
    get:
      summary: List all submissions
      deprecated: false
      description: >-
        This API allows to list all the submissions of a specified form in a
        workspace. Replace `spinkart` with your workspace's subdomain.
      tags:
        - Submissions
        - Submissions
      parameters:
        - name: form_id
          in: path
          description: >-
            Id of the form can be retrieved by going to the particular form, and
            copying it from the URL.
          required: true
          example: 238c77e9-f9b5-4cf7-b15a-a16b703ff4d6
          schema:
            type: string
        - name: page_number
          in: query
          description: >-
            Retrieve paginated forms by specifying the desired page number. If
            this parameter is absent, all forms will be returned.
          required: false
          schema:
            type: Number
        - name: page_size
          in: query
          description: >-
            Set the number of results returned in the response. Defaulting to 30
            when omitted.
          required: false
          schema:
            type: Number
        - name: X-Api-Key
          in: header
          description: >-
            You can generate an API key from [NeetoForm API Keys
            dashboard](https://help.neetoform.com/p/a-b5babf4e).
          required: true
          example: ''
          schema:
            type: string
      responses:
        '200':
          description: OK - Request succeeded
          content:
            application/json:
              schema:
                type: object
                properties:
                  submissions:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        created_at:
                          type: string
                          format: date-time
                        field_values:
                          type: array
                          items:
                            type: object
                            properties: {}
                        user_agent:
                          type: object
                          properties:
                            id:
                              type: string
                            name:
                              type: string
                            version:
                              type: string
                            ip_address:
                              type: string
                            device_name:
                              type: string
                            device_type:
                              type: string
                            operating_system:
                              type: string
                            operating_system_version:
                              type: string
                            submission_id:
                              type: string
                            created_at:
                              type: string
                              format: date-time
                            updated_at:
                              type: string
                              format: date-time
                        responses:
                          type: array
                          items:
                            type: object
                            properties:
                              id:
                                type: string
                              label:
                                type: string
                              position:
                                type: integer
                              kind:
                                type: string
                              slug:
                                type: string
                              value:
                                type: string
                  total_count:
                    type: integer
          headers: {}
        '400':
          description: Bad Request - Missing/Invalid parameters
          headers: {}
        '401':
          description: Unauthorized - Invalid API key
          headers: {}
        '500':
          description: Internal server error
          headers: {}
      security: []
webhooks: {}
components:
  schemas:
    Pagination:
      type: object
      properties:
        total_records:
          type: integer
          description: Total number of records
        total_pages:
          type: integer
          description: Total number of pages available
        current_page_number:
          type: integer
          description: Current page number
        page_size:
          type: integer
          description: Number of records per page
    Booking:
      type: object
      properties: {}
    BookingListResponse:
      type: object
      properties:
        bookings:
          type: array
          items:
            $ref: '#/components/schemas/Booking'
        pagination:
          $ref: '#/components/schemas/Pagination'
    Meeting:
      type: object
      properties:
        id:
          type: string
        sid:
          type: string
        name:
          type: string
        slug:
          type: string
        description:
          type: string
        kind:
          type: string
          enum:
            - one_on_one
            - round_robin
            - multihost
            - grouped
        duration:
          type: integer
        disabled:
          type: boolean
        spot:
          type: string
          enum:
            - custom
            - jitsi
            - google_meet
            - daily
            - zoom
            - whereby
            - teams
            - phone_call
            - in_person
        spot_in_person_location:
          type:
            - string
            - 'null'
        spot_custom_text:
          type:
            - string
            - 'null'
        spot_phone_call_number:
          type:
            - string
            - 'null'
        is_template:
          type: boolean
        schedulable_range_type:
          type: string
          enum:
            - number_of_days_into_the_future
            - number_of_business_days_into_the_future
            - date_range
        schedulable_range_value:
          type: string
        lead_time:
          type: integer
        start_time_increment:
          type: integer
        created_at:
          type: string
          examples:
            - '2024-12-23T05:05:27.037Z'
        updated_at:
          type: string
          examples:
            - '2025-03-31T13:22:19.832Z'
        deleted_at:
          type:
            - string
            - 'null'
          examples:
            - null
        is_multiple_spots_allowed:
          type: boolean
        is_multiple_durations_allowed:
          type: boolean
        conditional_pricing_enabled:
          type: boolean
        is_email_reminders_enabled:
          type: boolean
        is_sms_reminders_enabled:
          type: boolean
        organization_id:
          type: string
        rescheduling_lead_time:
          type: integer
        cancellation_lead_time:
          type: integer
        booking_modification_allowed:
          type: boolean
        cancellation_too_late_notice:
          type:
            - string
            - 'null'
        cancellation_policy:
          type:
            - string
            - 'null'
        rescheduling_too_late_notice:
          type:
            - string
            - 'null'
        pre_booking_allowed:
          type: boolean
        original_price_enabled:
          type: boolean
        original_price:
          type:
            - number
            - 'null'
        fees:
          type: array
          items:
            type: object
            properties: {}
        durations_possible:
          type: array
          items:
            type: integer
    MeetingListResponse:
      type: object
      properties:
        meetings:
          type: array
          items:
            $ref: '#/components/schemas/Meeting'
        pagination:
          $ref: '#/components/schemas/Pagination'
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Category
    Pet:
      type: object
      required:
        - name
        - photoUrls
      properties:
        id:
          type: integer
          format: int64
        category:
          $ref: '#/components/schemas/Category'
        name:
          type: string
          examples:
            - doggie
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: Pet
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Tag
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        petId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
      xml:
        name: Order
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          format: int32
          description: User Status
      xml:
        name: User
    UserArray:
      type: array
      items:
        $ref: '#/components/schemas/User'
  securitySchemes:
    apikey-header-X-Api-Key:
      type: apiKey
      in: header
      name: X-Api-Key
    api_key:
      type: apiKey
      name: api_key
      in: header
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore.swagger.io/oauth/authorize
          scopes:
            read:pets: read your pets
            write:pets: modify pets in your account
servers: []
security: []
